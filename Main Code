#libraries
import turtle
from turtle import *
import random

#screen setup
screen = Screen()
screen.title("myscreen")
screen.bgcolor("black")
screen.tracer(0)


#class that defines the player's ship
class playership:
    def __init__(self):
        self.turtle = Turtle()
        self.turtle.shape("triangle")
        self.turtle.color("white")
        self.turtle.penup()
        self.turtle.goto(0, -300)
        self.turtle.setheading(90)

    #methods for moving in increments of 20, borders of -340 to 340
    def move_left(self):
        if self.turtle.xcor() > -340:
            self.turtle.setx(self.turtle.xcor() - 20)

    def move_right(self):
        if self.turtle.xcor() < 340:
            self.turtle.setx(self.turtle.xcor() + 20)

    #methods to get player's current position
    def get_x_position(self):
        return self.turtle.xcor()

    def get_y_position(self):
        return self.turtle.ycor()


#class that defines the laser
class laser:
    def __init__(self):
        self.turtle = Turtle()
        self.turtle.shape("square")
        self.turtle.color("red")
        self.turtle.setheading(90)
        self.turtle.shapesize(stretch_wid=1, stretch_len=50)
        self.turtle.penup()
        self.turtle.hideturtle()

    #hide laser function for the ontimer
    def hide_laser(self):
        self.turtle.hideturtle()

    def fire_laser(self):
        #getting player's position
        player_x_position = player_ship.get_x_position()
        player_y_position = player_ship.get_y_position()

        #moving laser turtle to the player and where it should visibly appear
        self.turtle.goto(player_x_position, player_y_position + 510)
        self.turtle.showturtle()

        #check if there is an alien above the player and kill it
        for alien_instance in aliens:
            if alien_instance.get_x_position() == player_x_position:
                alien_instance.hide()
                aliens.remove(alien_instance)
                break

        #lets the laser turtle show for a bit but disappear quickly
        screen.ontimer(self.hide_laser, 100)


#class that creates the alien turtle and points it down (common to all aliens)
#includes movement and location methods
class alien:
    def __init__(self):
        self.turtle = turtle.Turtle()
        self.turtle.penup()
        self.turtle.setheading(270)

    #moves alien down at a certain speed
    def move(self):
        self.turtle.forward(self.speed)

    #methods to get alien's current position
    def get_x_position(self):
        return self.turtle.xcor()

    def get_y_position(self):
        return self.turtle.ycor()

    #used in the laser class to hide the alien when killed
    def hide(self):
        self.turtle.hideturtle()

#class to establish the unique/changeable characteristics of each alien
class aliencharacteristics(alien):
    def __init__(self, shape, color, speed, y_spawn):
        super().__init__()
        self.turtle.shape(shape)
        self.turtle.color(color)
        self.speed = speed
        self.y_spawn = y_spawn
        self.turtle.goto(random.randint(-17, 17) * 20, self.y_spawn)

#classes filling in characteristics for specific alien types
class normalalien(aliencharacteristics):
    def __init__(self):
        super().__init__("circle", "green", 0.8, 300)

class fastalien(aliencharacteristics):
    def __init__(self):
        super().__init__("triangle", "yellow", 1, 300)

class closealien(aliencharacteristics):
    def __init__(self):
        super().__init__("square", "blue", 0.6, 200)


#create the player's ship
player_ship = playership()

#create the laser
laser_beam = laser()

#create aliens
aliens = []
for x in range(10): #change this for the number of aliens to spawn (currently 10)
    thirtythreechance = random.randint(1,3)
    if thirtythreechance == 1:
        aliens.append(normalalien())
    if thirtythreechance == 2:
        aliens.append(fastalien())
    if thirtythreechance == 3:
        aliens.append(closealien())

#keyboard inputs
screen.listen()
screen.onkeypress(player_ship.move_left, "Left")
screen.onkeypress(player_ship.move_right, "Right")
screen.onkeypress(laser_beam.fire_laser, "space")

#main loop
while(True):
    #moves all aliens in the list
    for alien_instance in aliens:
        alien_instance.move()
        if alien_instance.get_y_position() <= -300: #if an alien reaches the bottom/past the player
            print ('you lost')
            screen.ontimer(exit, 150) #small delay so we see aliens hit bottom
    if len(aliens) == 0: #if the list is empty, all aliens are dead and we won
        print ('you won')
        screen.ontimer(exit, 150) #small delay so we see last alien die
    screen.update()
